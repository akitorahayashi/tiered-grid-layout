name: Run Tests

on:
  workflow_call:
    outputs:
      test_result:
        description: "Test Result"
        value: ${{ jobs.report-status.outputs.test_result }}

jobs:
  build-for-testing:
    runs-on: macos-latest
    env:
      MINT_PATH: ${{ github.workspace }}/.mint
      DERIVED_DATA_PATH: "ci-outputs/test-results/DerivedData"
    outputs:
      simulator_id: ${{ steps.select_simulator.outputs.simulator_id }}
      derived_data_path: ${{ env.DERIVED_DATA_PATH }}
    steps:
    - uses: actions/checkout@v4

    - name: Cache Mint packages
      uses: actions/cache@v4
      id: cache-mint-packages
      with:
        path: ${{ env.MINT_PATH }}
        key: ${{ runner.os }}-mint-${{ hashFiles('**/Mintfile') }}
        restore-keys: |
          ${{ runner.os }}-mint-

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'

    - name: Install Mint
      run: brew install mint
      
    - name: Generate Xcode Project
      run: mint run xcodegen generate

    - name: Create Test Output Directories
      run: mkdir -p ${{ env.DERIVED_DATA_PATH }} ci-outputs/test-results/unit ci-outputs/test-results/ui
        
    - name: Make find-simulator script executable
      run: chmod +x .github/scripts/find-simulator.sh

    - name: Select Simulator
      id: select_simulator
      run: |
        SIMULATOR_ID=$(./.github/scripts/find-simulator.sh)
        echo "シミュレータ ID ($SIMULATOR_ID) が選択されました"
        echo "simulator_id=$SIMULATOR_ID" >> $GITHUB_OUTPUT

    - name: Build for Testing
      env:
        TZ: Asia/Tokyo
      run: |
        set -o pipefail
        echo "シミュレータ ID (${{ steps.select_simulator.outputs.simulator_id }}) を使用してテスト用にビルドします"
        xcodebuild build-for-testing \
          -project "SampleApp.xcodeproj" \
          -scheme "SampleApp" \
          -destination "platform=iOS Simulator,id=${{ steps.select_simulator.outputs.simulator_id }}" \
          -derivedDataPath ./${{ env.DERIVED_DATA_PATH }} \
          -configuration Debug \
          CODE_SIGNING_ALLOWED=NO \
          | xcbeautify
      continue-on-error: false
      
    - name: Upload Derived Data
      uses: actions/upload-artifact@v4
      with:
        name: derived-data-${{ github.run_id }}
        path: ${{ env.DERIVED_DATA_PATH }}
        retention-days: 1

  unit-test:
    needs: build-for-testing
    runs-on: macos-latest
    outputs:
      result: ${{ steps.unit_tests.outcome }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache Mint packages
        uses: actions/cache@v4
        id: cache-mint-packages
        with:
          path: ${{ github.workspace }}/.mint
          key: ${{ runner.os }}-mint-${{ hashFiles('**/Mintfile') }}
          restore-keys: |
            ${{ runner.os }}-mint-
  
      - name: Install Mint
        run: brew install mint

      - name: Generate Xcode Project
        run: mint run xcodegen generate

      - name: Create Unit Test Output Directory
        run: mkdir -p ci-outputs/test-results/unit

      - name: Download Derived Data
        uses: actions/download-artifact@v4
        with:
          name: derived-data-${{ github.run_id }}
          path: ${{ needs.build-for-testing.outputs.derived_data_path }}

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Run Unit Tests
        id: unit_tests
        env:
          TZ: Asia/Tokyo
        run: |
          set -o pipefail
          echo "シミュレータ ID (${{ needs.build-for-testing.outputs.simulator_id }}) を使用してユニットテストを実行します"
          xcodebuild test-without-building \
            -project "SampleApp.xcodeproj" \
            -scheme "TieredGridLayoutTests" \
            -destination "platform=iOS Simulator,id=${{ needs.build-for-testing.outputs.simulator_id }}" \
            -derivedDataPath ./${{ needs.build-for-testing.outputs.derived_data_path }} \
            -enableCodeCoverage NO \
            -resultBundlePath ./ci-outputs/test-results/unit/TestResults.xcresult \
            | xcbeautify --report junit --report-path ./ci-outputs/test-results/unit/junit.xml
          
          ls -la ./ci-outputs/test-results/unit/
        continue-on-error: true

      - name: Verify Unit Test Results
        if: steps.unit_tests.outcome != 'success'
        run: |
          echo "❌ Error: Unit tests failed or did not produce results."
          RESULT_BUNDLE_PATH="./ci-outputs/test-results/unit/TestResults.xcresult"
          if [ ! -d "$RESULT_BUNDLE_PATH" ]; then
            echo "Result bundle not found at $RESULT_BUNDLE_PATH"
          fi

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results-${{ github.run_id }}
          path: ci-outputs/test-results/unit
          retention-days: 7

  ui-test:
    needs: build-for-testing
    runs-on: macos-latest
    outputs:
      result: ${{ steps.ui_tests.outcome }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache Mint packages
        uses: actions/cache@v4
        id: cache-mint-packages
        with:
          path: ${{ github.workspace }}/.mint
          key: ${{ runner.os }}-mint-${{ hashFiles('**/Mintfile') }}
          restore-keys: |
            ${{ runner.os }}-mint-
  
      - name: Install Mint
        run: brew install mint

      - name: Generate Xcode Project
        run: mint run xcodegen generate

      - name: Create UI Test Output Directory
        run: mkdir -p ci-outputs/test-results/ui

      - name: Download Derived Data
        uses: actions/download-artifact@v4
        with:
          name: derived-data-${{ github.run_id }}
          path: ${{ needs.build-for-testing.outputs.derived_data_path }}

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Run UI Tests
        id: ui_tests
        env:
          TZ: Asia/Tokyo
        run: |
          set -o pipefail
          echo "シミュレータ ID (${{ needs.build-for-testing.outputs.simulator_id }}) を使用して UI テストを実行します"
          xcodebuild test-without-building \
            -project "SampleApp.xcodeproj" \
            -scheme "TieredGridLayoutUITests" \
            -destination "platform=iOS Simulator,id=${{ needs.build-for-testing.outputs.simulator_id }}" \
            -derivedDataPath ./${{ needs.build-for-testing.outputs.derived_data_path }} \
            -enableCodeCoverage NO \
            -resultBundlePath ./ci-outputs/test-results/ui/TestResults.xcresult \
            | xcbeautify --report junit --report-path ./ci-outputs/test-results/ui/junit.xml
            
          ls -la ./ci-outputs/test-results/ui/
        continue-on-error: true

      - name: Verify UI Test Results
        if: steps.ui_tests.outcome != 'success'
        run: |
          echo "❌ Error: UI tests failed or did not produce results."
          RESULT_BUNDLE_PATH="./ci-outputs/test-results/ui/TestResults.xcresult"
          if [ ! -d "$RESULT_BUNDLE_PATH" ]; then
            echo "Result bundle not found at $RESULT_BUNDLE_PATH"
          fi

      - name: Upload UI Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ui-test-results-${{ github.run_id }}
          path: ci-outputs/test-results/ui
          retention-days: 7

  report-status:
    needs: [unit-test, ui-test]
    runs-on: ubuntu-latest
    if: always()
    outputs:
      test_result: ${{ steps.set_status.outputs.result }}
    steps:
      - name: Check test job outcomes and set final status
        id: set_status
        run: |
          echo "Unit Test job outcome: ${{ needs.unit-test.result }}"
          echo "UI Test job outcome: ${{ needs.ui-test.result }}"
          if [[ "${{ needs.unit-test.result }}" == "success" && "${{ needs.ui-test.result }}" == "success" ]]; then
            echo "Both test jobs succeeded."
            echo "result=success" >> $GITHUB_OUTPUT
          else
            echo "One or both test jobs failed or were skipped."
            echo "result=failure" >> $GITHUB_OUTPUT
          fi 